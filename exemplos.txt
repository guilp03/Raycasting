# EXEMPLOS
adcionar_triangulo(cor, ponto1,ponto2,ponto3)
adcionar_esfera(cor,raio,centro)
adcionar_plano(cor, ponto, vetor_normal)
adcionar_triangulo((0,255,0), (4,0,1), (4,0,-1), (4,1,0))
adcionar_triangulo((255,0,0), translacao([4,0,1], 1, 2, 1), translacao([4,0,-1],1,2,1), translacao([4,1,0],1,2,1))
adcionar_plano((0,255,0), (4,0,-1), (4,1,0))
adcionar_plano((255,0,0), rotacao_z([4,0,-1],30), rotacao_z([4,1,0],30))
adcionar_plano(
   (152,186, 213),
   (1,0,-1),
   (3,2,0)
)
adcionar_plano(
    (127, 0, 255),
    rotacao_z((4,0,-1), 15),
    rotacao_z((3,2,0), 15)
)
adcionar_triangulo(
    (127, 0, 255),
    rotacao_z((4,0,-1), 15),
    rotacao_z((4,0,1), 15),
    rotacao_z((4,1,0), 15)
)

ROSA PINK (127, 0, 255)
BEGE (152,186, 213)


# EXEMPLOS APÓS TRANSFORMAÇÃO
    
for triangulo_ in cubo:
    cor = triangulo_[0]
    pontos = (triangulo_[1], triangulo_[2], triangulo_[3])
    pontos = tuple(map(lambda x: afim.translacao(x, -4, 0, 0), pontos))
    pontos = tuple(map(lambda x: afim.expandir(x, 2), pontos))
    pontos = tuple(map(lambda x: afim.rotacao_x(x, 20), pontos))
    pontos = tuple(map(lambda x: afim.rotacao_y(x, 20), pontos))
    pontos = tuple(map(lambda x: afim.rotacao_z(x, 20), pontos))
    pontos = tuple(map(lambda x: afim.translacao(x, 4, 0, 0), pontos))
        
    adcionar_triangulo(cor, *pontos)
 #for que percorre toda a tela e gera a intesecção com os objetos
# para gerar a imagem final
for i in range(hres):
    for j in range(vres):
        vetor_atual = vetor_inicial + i*desl_h + j*desl_v
        imagem[j,i] = collor(camera, vetor_atual, objetos)[1]

cv.imshow("grupo06 - DEPOIS", imagem)


#############################################################################

adicionar_luz(objeto.Luz((0,5,0),(0.5,0.5,0.5)))
adcionar_esfera(1,(3,0,0), (255, 0, 127),
        objeto.Material(kd=(0.0,0.0,0.0),
        ke=(0.5,0.5,0.5),
        ka=(0.2,0.1,0.0),
        kr=0.5,
        kt = 0.5,
        n = 3,
        od = (160,70,0),
        reflete=True,
        refrata=False))

##############################################################################


    adicionar_luz(objeto.Luz((0.0,3.0,5.0), (0.5,0.5,0.5)))
    adicionar_luz(objeto.Luz((0.0,3.0,-5.0), (0.5,0.5,0.5)))

   quadrado = readobj.read_obj("square.obj", (255,255,255))
    for triangulo_ in quadrado:
        adcionar_triangulo(
            *triangulo_, 
            _material = objeto.Material(
                kd=(0.0,0.0,0.0),
                ke=(0.5,0.5,0.5),
                ka=(0.1,0.1,0.1),
                kr= 0.5,
                kt = 0.5,
                n = 1
                )
            )


    cubo = readobj.read_obj("cube.obj", (255,255,255))
    cubo_objeto = objeto.Objeto()
    for triangulo_ in cubo:
       cubo_objeto.adcionar_triangulo(
           *triangulo_,
           _material = objeto.Material(
               kd=(0.0,0.0,0.0),
               ke=(0.5,0.5,0.5),
               ka=(0.2,0.1,0.0),
               kr=0.5,
               kt = 0.5,
               n = 3,
               od = (160,70,0),
               reflete=False
           )
       )
    OBJETOS_LISTA.append(cubo_objeto)
    adcionar_plano((0,0,0), (0,5,0), (-1,-1,0), _material = objeto.Material(
               kd=(0.4,0.4,0.4),
               ke=(0.0,0.0,0.0),
               ka=(0.0,0.0,0.0),
               kr = 0.4,
               kt = 0.9,
               n = 2,
               ior = 1.1,
               od = (255,255,255),
               reflete=False,
               refrata=True))

    adcionar_esfera(0.4, (2,0,0), (255,255,255),
           _material = objeto.Material(
               kd=(0.0,0.0,0.0),
               ke=(0.0,0.0,0.0),
               ka=(0.0,0.0,0.0),
               kr = 0.4,
               kt = 0.9,
               n = 2,
               ior = 1.1,
               od = (255,255,255),
               reflete=False,
               refrata=True
           )
    )
    adcionar_esfera(0.4, (2,1,0), (255,255,255),
          _material = objeto.Material(
               kd=(0.0,0.0,0.0),
               ke=(0.0,0.0,0.0),
              ka=(0.0,0.0,0.0),
               kr = 0.4,
               kt = 0.9,
               n = 2,
               ior = 1.1,
               od = (255,255,255),
               reflete=False,
               refrata=True
           )
    )
    adcionar_esfera(0.4, (2,-1,0), (255,255,255),
           _material = objeto.Material(
               kd=(0.0,0.0,0.0),
               ke=(0.0,0.0,0.0),
               ka=(0.0,0.0,0.0),
               kr = 0.4,
               kt = 0.9,
               n = 2,
               ior = 1.1,
               od = (255,255,255),
               reflete=False,
               refrata=True
           )
    )

    adcionar_esfera(1,(5,2,0), (255, 0, 0),
            objeto.Material(kd=(0.0,0.0,0.0),
            ke=(1,0,0.5),
            ka=(0.2,0.1,0.0),
            kr=0.5,
            kt=0.5,
            n=3,
            od=(255,0,127),
            reflete=False,
            refrata=False))
    
    adcionar_esfera(1,(5,2,2), (255, 255, 0),
            objeto.Material(kd=(0.5,0.3,0.3),
            ke=(1,0,0.5),
            ka=(0.2,0.1,0.0),
            kr=0.5,
            kt=0.5,
            n=3,
            od=(255,0,127),
            reflete=False,
            refrata=False))
    
    adcionar_esfera(1,(5,0,2), (0, 0, 255),
            objeto.Material(kd=(0.0,0.0,0.0),
            ke=(1,0,0.5),
            ka=(0.2,0.1,0.0),
            kr=0.5,
            kt=0.5,
            n=3,
            od=(255,0,127),
            reflete=False,
            refrata=False))

    #adcionar_triangulo((255, 0, 127), (0,3,-3), (3,0,3), (0,3,0), 
    #        objeto.Material(kd=(0.0,0.0,0.0),
    #        ke=(0.5,0.5,0.5),
    #        ka=(0.2,0.1,0.0),
    #        kr=0.5,
    #        kt = 0.5,
    #        n = 3,
    #        od = (160,70,0),
    #        reflete=False,
    #        refrata=True))
    # for que percorre toda a tela e gera a intesecção com os objetos
    # para gerar a imagem final